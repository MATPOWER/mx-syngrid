name: CI

on: [push]

jobs:
  build:
    strategy:
      matrix:
#        os: [macos-10.15, macos-11.0, ubuntu-18.04, ubuntu-20.04]
        os: [macos-latest, ubuntu-18.04, ubuntu-20.04]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Initialize Package Manager (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get update -qq

    - name: Initialize Package Manager (Mac)
      if: startsWith(matrix.os, 'macos')
      run: brew update

    - name: Install bash (Mac)
      if: startsWith(matrix.os, 'macos')
      run: brew install bash

    - name: Install GNU Octave / IPOPT (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install -y -qq coinor-libipopt-dev liboctave-dev octave
        octave-cli --no-gui --eval ver
        echo "OCTAVE_VER=`octave-cli --no-gui --eval "fprintf('%s', ver('octave').Version)"`" >> $GITHUB_ENV

    - name: Install GNU Octave (Mac)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install octave
        octave-cli --no-gui --eval ver
        echo "OCTAVE_VER=`octave-cli --no-gui --eval "fprintf('%s', ver('octave').Version)"`" >> $GITHUB_ENV

    - name: Include IPOPT?
      if: startsWith(env.OCTAVE_VER, '4.0') != 1
      run: |
        mkdir $HOME/build
        echo "INCLUDE_IPOPT=1" >> $GITHUB_ENV

    - name: Cache IPOPT Libs
      if: startsWith(matrix.os, 'macos') && env.INCLUDE_IPOPT
      id: cache-ipopt-libs
      uses: actions/cache@v2
      with:
        path: ~/install
        key: ${{ matrix.os }}-ipopt-libs

    - name: Cache IPOPT
      if: env.INCLUDE_IPOPT
      id: cache-ipopt
      uses: actions/cache@v2
      with:
        path: ~/build/ipopt
        key: ${{ matrix.os }}-ipopt

    - name: Build IPOPT from source (Mac)
      if: startsWith(matrix.os, 'macos') && env.INCLUDE_IPOPT && steps.cache-ipopt-libs.outputs.cache-hit != 'true'
      run: |
        git clone https://www.github.com/coin-or/coinbrew
        cd coinbrew
        ./coinbrew fetch Ipopt --no-prompt
        ./coinbrew build Ipopt --prefix=$HOME/install --test --no-prompt
        ./coinbrew install Ipopt

    - name: Build IPOPT Octave interface
      if: env.INCLUDE_IPOPT && steps.cache-ipopt.outputs.cache-hit != 'true'
      env:
        IPOPT_VER: 3.11.9
      run: |
        export PKG_CONFIG_PATH=$HOME/install/lib/pkgconfig
        curl -SL https://github.com/coin-or/Ipopt/archive/releases/${IPOPT_VER}.tar.gz | tar -xzC $HOME/build
        mv $HOME/build/Ipopt-releases-${IPOPT_VER}/Ipopt/contrib/MatlabInterface $HOME/build/ipopt
        mv $GITHUB_WORKSPACE/.github/ipopt/Makefile $HOME/build/ipopt/src
        make -C $HOME/build/ipopt/src
        mv $HOME/build/ipopt/src/*.mex $HOME/build/ipopt/

    - name: Install IPOPT Octave interface
      if: env.INCLUDE_IPOPT
      run: octave-cli --no-gui --eval "addpath('$HOME/build/ipopt'); savepath"

    - name: Install MP-Test, Set MPTEST_PATH
      run: |
        git clone --depth=1 https://github.com/MATPOWER/mptest.git $HOME/mptest
        echo "MPTEST_PATH=$HOME/mptest/lib:$HOME/mptest/lib/t" >> $GITHUB_ENV

    - name: Install MIPS, Set MIPS_PATH
      run: |
        git clone --depth=1 https://github.com/MATPOWER/mips.git $HOME/mips
        echo "MIPS_PATH=$HOME/mips/lib:$HOME/mips/lib/t:${MPTEST_PATH}" >> $GITHUB_ENV

    - name: Install MP-Opt-Model, Set MP_OPT_MODEL_PATH
      run: |
        git clone --depth=1 https://github.com/MATPOWER/mp-opt-model.git $HOME/mp-opt-model
        echo "MP_OPT_MODEL_PATH=$HOME/mp-opt-model/lib:$HOME/mp-opt-model/lib/t:${MIPS_PATH}" >> $GITHUB_ENV

    - name: Install MATPOWER
      run: |
        git clone --depth=1 https://github.com/MATPOWER/matpower.git $HOME/matpower
        octave-cli --no-gui -p $HOME/matpower --eval "install_matpower(1,1,1)"
        octave-cli --no-gui --eval mpver
        echo "TEST_PATH=${GITHUB_WORKSPACE}/lib:${GITHUB_WORKSPACE}/lib/t:${MP_OPT_MODEL_PATH}" >> $GITHUB_ENV

    - name: Test IPOPT availability, print version number
      if: env.INCLUDE_IPOPT
      run:  |
        octave-cli --no-gui --eval "if ~have_feature('ipopt'), exit(1); end"
        octave-cli --no-gui --eval "qps_ipopt([],[1; 1],[1 1],[2],[2],[1; 1],[1; 1],[1; 1],struct('verbose', 2));"

    - name: Test SynGrid
      run: |
        octave-cli --no-gui -p $TEST_PATH --eval mpver
        octave-cli --no-gui -p $TEST_PATH --eval "test_syngrid(1,1)"
